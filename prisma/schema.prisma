generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Transactions {
  id                                               Int       @id @default(autoincrement())
  senderWalletId                                   Int
  recipientWalletId                                Int
  amount                                           Decimal   @db.Decimal(10, 2)
  createdAt                                        DateTime? @default(now()) @db.Timestamp(6)
  updatedAt                                        DateTime? @default(now()) @db.Timestamp(6)
  wallets_transactions_receiver_wallet_idTowallets Wallets?  @relation("transactions_receiver_wallet_idTowallets", fields: [recipientWalletId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  wallets_transactions_sender_wallet_idTowallets   Wallets?  @relation("transactions_sender_wallet_idTowallets", fields: [senderWalletId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Users {
  id               Int       @id @default(autoincrement())
  username         String    @unique @db.VarChar(255)
  password         String    @db.VarChar(255)
  lastLogin        DateTime? @db.Timestamp(6)
  hashRefreshToken String?   @db.VarChar(255)
  createdAt        DateTime? @default(now()) @db.Timestamp(6)
  updatedAt        DateTime? @default(now()) @db.Timestamp(6)
  wallet           Wallets?
}

model Wallets {
  id                                                    Int            @id @default(autoincrement())
  userId                                                Int            @unique
  balance                                               Decimal?       @default(0.00) @db.Decimal(10, 2)
  createdAt                                             DateTime?      @default(now()) @db.Timestamp(6)
  updatedAt                                             DateTime?      @default(now()) @db.Timestamp(6)
  transactions_transactions_receiver_wallet_idTowallets Transactions[] @relation("transactions_receiver_wallet_idTowallets")
  transactions_transactions_sender_wallet_idTowallets   Transactions[] @relation("transactions_sender_wallet_idTowallets")

  user Users? @relation(fields: [userId], references: [id])
}
